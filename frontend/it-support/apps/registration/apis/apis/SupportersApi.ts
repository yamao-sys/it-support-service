/* tslint:disable */
/* eslint-disable */
/**
 * Registration Service
 * registration APIs
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type { SupporterSignUpResponse } from "../models/index";
import { SupporterSignUpResponseFromJSON, SupporterSignUpResponseToJSON } from "../models/index";

export interface PostSupporterSignUpRequest {
  firstName: string;
  lastName: string;
  email: string;
  password: string;
  birthday?: Date;
  frontIdentification?: Blob;
  backIdentification?: Blob;
}

export interface PostSupporterValidateSignUpRequest {
  firstName: string;
  lastName: string;
  email: string;
  password: string;
  birthday?: Date;
  frontIdentification?: Blob;
  backIdentification?: Blob;
}

/**
 *
 */
export class SupportersApi extends runtime.BaseAPI {
  /**
   * Supporter Sign Up
   */
  async postSupporterSignUpRaw(
    requestParameters: PostSupporterSignUpRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<SupporterSignUpResponse>> {
    if (requestParameters["firstName"] == null) {
      throw new runtime.RequiredError(
        "firstName",
        'Required parameter "firstName" was null or undefined when calling postSupporterSignUp().',
      );
    }

    if (requestParameters["lastName"] == null) {
      throw new runtime.RequiredError(
        "lastName",
        'Required parameter "lastName" was null or undefined when calling postSupporterSignUp().',
      );
    }

    if (requestParameters["email"] == null) {
      throw new runtime.RequiredError(
        "email",
        'Required parameter "email" was null or undefined when calling postSupporterSignUp().',
      );
    }

    if (requestParameters["password"] == null) {
      throw new runtime.RequiredError(
        "password",
        'Required parameter "password" was null or undefined when calling postSupporterSignUp().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const consumes: runtime.Consume[] = [{ contentType: "multipart/form-data" }];
    // @ts-ignore: canConsumeForm may be unused
    const canConsumeForm = runtime.canConsumeForm(consumes);

    let formParams: { append(param: string, value: any): any };
    let useForm = false;
    // use FormData to transmit files using content-type "multipart/form-data"
    useForm = canConsumeForm;
    // use FormData to transmit files using content-type "multipart/form-data"
    useForm = canConsumeForm;
    if (useForm) {
      formParams = new FormData();
    } else {
      formParams = new URLSearchParams();
    }

    if (requestParameters["firstName"] != null) {
      formParams.append("firstName", requestParameters["firstName"] as any);
    }

    if (requestParameters["lastName"] != null) {
      formParams.append("lastName", requestParameters["lastName"] as any);
    }

    if (requestParameters["email"] != null) {
      formParams.append("email", requestParameters["email"] as any);
    }

    if (requestParameters["password"] != null) {
      formParams.append("password", requestParameters["password"] as any);
    }

    if (requestParameters["birthday"] != null) {
      formParams.append("birthday", requestParameters["birthday"] as any);
    }

    if (requestParameters["frontIdentification"] != null) {
      formParams.append("frontIdentification", requestParameters["frontIdentification"] as any);
    }

    if (requestParameters["backIdentification"] != null) {
      formParams.append("backIdentification", requestParameters["backIdentification"] as any);
    }

    const response = await this.request(
      {
        path: `/supporters/sign-up`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: formParams,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SupporterSignUpResponseFromJSON(jsonValue),
    );
  }

  /**
   * Supporter Sign Up
   */
  async postSupporterSignUp(
    requestParameters: PostSupporterSignUpRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<SupporterSignUpResponse> {
    const response = await this.postSupporterSignUpRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Supporter Validate Sign Up
   */
  async postSupporterValidateSignUpRaw(
    requestParameters: PostSupporterValidateSignUpRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<SupporterSignUpResponse>> {
    if (requestParameters["firstName"] == null) {
      throw new runtime.RequiredError(
        "firstName",
        'Required parameter "firstName" was null or undefined when calling postSupporterValidateSignUp().',
      );
    }

    if (requestParameters["lastName"] == null) {
      throw new runtime.RequiredError(
        "lastName",
        'Required parameter "lastName" was null or undefined when calling postSupporterValidateSignUp().',
      );
    }

    if (requestParameters["email"] == null) {
      throw new runtime.RequiredError(
        "email",
        'Required parameter "email" was null or undefined when calling postSupporterValidateSignUp().',
      );
    }

    if (requestParameters["password"] == null) {
      throw new runtime.RequiredError(
        "password",
        'Required parameter "password" was null or undefined when calling postSupporterValidateSignUp().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const consumes: runtime.Consume[] = [{ contentType: "multipart/form-data" }];
    // @ts-ignore: canConsumeForm may be unused
    const canConsumeForm = runtime.canConsumeForm(consumes);

    let formParams: { append(param: string, value: any): any };
    let useForm = false;
    // use FormData to transmit files using content-type "multipart/form-data"
    useForm = canConsumeForm;
    // use FormData to transmit files using content-type "multipart/form-data"
    useForm = canConsumeForm;
    if (useForm) {
      formParams = new FormData();
    } else {
      formParams = new URLSearchParams();
    }

    if (requestParameters["firstName"] != null) {
      formParams.append("firstName", requestParameters["firstName"] as any);
    }

    if (requestParameters["lastName"] != null) {
      formParams.append("lastName", requestParameters["lastName"] as any);
    }

    if (requestParameters["email"] != null) {
      formParams.append("email", requestParameters["email"] as any);
    }

    if (requestParameters["password"] != null) {
      formParams.append("password", requestParameters["password"] as any);
    }

    if (requestParameters["birthday"] != null) {
      formParams.append("birthday", requestParameters["birthday"] as any);
    }

    if (requestParameters["frontIdentification"] != null) {
      formParams.append("frontIdentification", requestParameters["frontIdentification"] as any);
    }

    if (requestParameters["backIdentification"] != null) {
      formParams.append("backIdentification", requestParameters["backIdentification"] as any);
    }

    const response = await this.request(
      {
        path: `/supporters/validate-sign-up`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: formParams,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SupporterSignUpResponseFromJSON(jsonValue),
    );
  }

  /**
   * Supporter Validate Sign Up
   */
  async postSupporterValidateSignUp(
    requestParameters: PostSupporterValidateSignUpRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<SupporterSignUpResponse> {
    const response = await this.postSupporterValidateSignUpRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
