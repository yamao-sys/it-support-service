/* tslint:disable */
/* eslint-disable */
/**
 * Business Service
 * business APIs
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  ProjectResponse,
  ProjectStoreInput,
  ProjectStoreResponse,
  ProjectsListResponse,
} from "../models/index";
import {
  ProjectResponseFromJSON,
  ProjectResponseToJSON,
  ProjectStoreInputFromJSON,
  ProjectStoreInputToJSON,
  ProjectStoreResponseFromJSON,
  ProjectStoreResponseToJSON,
  ProjectsListResponseFromJSON,
  ProjectsListResponseToJSON,
} from "../models/index";

export interface GetProjectRequest {
  id: number;
}

export interface GetProjectsRequest {
  pageToken?: string;
}

export interface PostProjectRequest {
  projectStoreInput: ProjectStoreInput;
}

export interface PutProjectRequest {
  id: number;
  projectStoreInput: ProjectStoreInput;
}

/**
 *
 */
export class ProjectsApi extends runtime.BaseAPI {
  /**
   * Get Project
   */
  async getProjectRaw(
    requestParameters: GetProjectRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ProjectResponse>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling getProject().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/projects/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters["id"])),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ProjectResponseFromJSON(jsonValue));
  }

  /**
   * Get Project
   */
  async getProject(
    requestParameters: GetProjectRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ProjectResponse> {
    const response = await this.getProjectRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Create Project
   */
  async getProjectsRaw(
    requestParameters: GetProjectsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ProjectsListResponse>> {
    const queryParameters: any = {};

    if (requestParameters["pageToken"] != null) {
      queryParameters["pageToken"] = requestParameters["pageToken"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/projects`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ProjectsListResponseFromJSON(jsonValue),
    );
  }

  /**
   * Create Project
   */
  async getProjects(
    requestParameters: GetProjectsRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ProjectsListResponse> {
    const response = await this.getProjectsRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Create Project
   */
  async postProjectRaw(
    requestParameters: PostProjectRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ProjectStoreResponse>> {
    if (requestParameters["projectStoreInput"] == null) {
      throw new runtime.RequiredError(
        "projectStoreInput",
        'Required parameter "projectStoreInput" was null or undefined when calling postProject().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/projects`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: ProjectStoreInputToJSON(requestParameters["projectStoreInput"]),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ProjectStoreResponseFromJSON(jsonValue),
    );
  }

  /**
   * Create Project
   */
  async postProject(
    requestParameters: PostProjectRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ProjectStoreResponse> {
    const response = await this.postProjectRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Update Project
   */
  async putProjectRaw(
    requestParameters: PutProjectRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ProjectStoreResponse>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling putProject().',
      );
    }

    if (requestParameters["projectStoreInput"] == null) {
      throw new runtime.RequiredError(
        "projectStoreInput",
        'Required parameter "projectStoreInput" was null or undefined when calling putProject().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/projects/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters["id"])),
        ),
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: ProjectStoreInputToJSON(requestParameters["projectStoreInput"]),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ProjectStoreResponseFromJSON(jsonValue),
    );
  }

  /**
   * Update Project
   */
  async putProject(
    requestParameters: PutProjectRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ProjectStoreResponse> {
    const response = await this.putProjectRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
