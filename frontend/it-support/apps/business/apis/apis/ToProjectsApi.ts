/* tslint:disable */
/* eslint-disable */
/**
 * Business Service
 * business APIs
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type { ToProjectResponse, ToProjectsListResponse } from "../models/index";
import {
  ToProjectResponseFromJSON,
  ToProjectResponseToJSON,
  ToProjectsListResponseFromJSON,
  ToProjectsListResponseToJSON,
} from "../models/index";

export interface GetToProjectRequest {
  id: number;
}

export interface GetToProjectsRequest {
  pageToken?: string;
  startDate?: Date;
  endDate?: Date;
}

/**
 *
 */
export class ToProjectsApi extends runtime.BaseAPI {
  /**
   * Get Project for Supporters
   */
  async getToProjectRaw(
    requestParameters: GetToProjectRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ToProjectResponse>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling getToProject().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/to-projects/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters["id"])),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ToProjectResponseFromJSON(jsonValue),
    );
  }

  /**
   * Get Project for Supporters
   */
  async getToProject(
    requestParameters: GetToProjectRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ToProjectResponse> {
    const response = await this.getToProjectRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get Projects for Supporters
   */
  async getToProjectsRaw(
    requestParameters: GetToProjectsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ToProjectsListResponse>> {
    const queryParameters: any = {};

    if (requestParameters["pageToken"] != null) {
      queryParameters["pageToken"] = requestParameters["pageToken"];
    }

    if (requestParameters["startDate"] != null) {
      queryParameters["startDate"] = (requestParameters["startDate"] as any)
        .toISOString()
        .substring(0, 10);
    }

    if (requestParameters["endDate"] != null) {
      queryParameters["endDate"] = (requestParameters["endDate"] as any)
        .toISOString()
        .substring(0, 10);
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/to-projects`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ToProjectsListResponseFromJSON(jsonValue),
    );
  }

  /**
   * Get Projects for Supporters
   */
  async getToProjects(
    requestParameters: GetToProjectsRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ToProjectsListResponse> {
    const response = await this.getToProjectsRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
