/* tslint:disable */
/* eslint-disable */
/**
 * Business Service
 * business APIs
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { Plan } from "./Plan";
import { PlanFromJSON, PlanFromJSONTyped, PlanToJSON, PlanToJSONTyped } from "./Plan";
import type { PlanValidationError } from "./PlanValidationError";
import {
  PlanValidationErrorFromJSON,
  PlanValidationErrorFromJSONTyped,
  PlanValidationErrorToJSON,
  PlanValidationErrorToJSONTyped,
} from "./PlanValidationError";

/**
 *
 * @export
 * @interface PlanStoreResponse
 */
export interface PlanStoreResponse {
  /**
   *
   * @type {Plan}
   * @memberof PlanStoreResponse
   */
  plan: Plan;
  /**
   *
   * @type {PlanValidationError}
   * @memberof PlanStoreResponse
   */
  errors: PlanValidationError;
}

/**
 * Check if a given object implements the PlanStoreResponse interface.
 */
export function instanceOfPlanStoreResponse(value: object): value is PlanStoreResponse {
  if (!("plan" in value) || value["plan"] === undefined) return false;
  if (!("errors" in value) || value["errors"] === undefined) return false;
  return true;
}

export function PlanStoreResponseFromJSON(json: any): PlanStoreResponse {
  return PlanStoreResponseFromJSONTyped(json, false);
}

export function PlanStoreResponseFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): PlanStoreResponse {
  if (json == null) {
    return json;
  }
  return {
    plan: PlanFromJSON(json["plan"]),
    errors: PlanValidationErrorFromJSON(json["errors"]),
  };
}

export function PlanStoreResponseToJSON(json: any): PlanStoreResponse {
  return PlanStoreResponseToJSONTyped(json, false);
}

export function PlanStoreResponseToJSONTyped(
  value?: PlanStoreResponse | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    plan: PlanToJSON(value["plan"]),
    errors: PlanValidationErrorToJSON(value["errors"]),
  };
}
