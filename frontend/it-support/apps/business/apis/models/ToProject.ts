/* tslint:disable */
/* eslint-disable */
/**
 * Business Service
 * business APIs
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
/**
 *
 * @export
 * @interface ToProject
 */
export interface ToProject {
  /**
   *
   * @type {number}
   * @memberof ToProject
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof ToProject
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof ToProject
   */
  description: string;
  /**
   *
   * @type {Date}
   * @memberof ToProject
   */
  startDate: Date;
  /**
   *
   * @type {Date}
   * @memberof ToProject
   */
  endDate: Date;
  /**
   *
   * @type {number}
   * @memberof ToProject
   */
  minBudget?: number;
  /**
   *
   * @type {number}
   * @memberof ToProject
   */
  maxBudget?: number;
  /**
   *
   * @type {string}
   * @memberof ToProject
   */
  proposalStatus: ToProjectProposalStatusEnum;
}

/**
 * @export
 */
export const ToProjectProposalStatusEnum = {
  NotProposed: "NOT PROPOSED",
  TemporaryCreating: "TEMPORARY CREATING",
  Proposed: "PROPOSED",
} as const;
export type ToProjectProposalStatusEnum =
  (typeof ToProjectProposalStatusEnum)[keyof typeof ToProjectProposalStatusEnum];

/**
 * Check if a given object implements the ToProject interface.
 */
export function instanceOfToProject(value: object): value is ToProject {
  if (!("id" in value) || value["id"] === undefined) return false;
  if (!("title" in value) || value["title"] === undefined) return false;
  if (!("description" in value) || value["description"] === undefined) return false;
  if (!("startDate" in value) || value["startDate"] === undefined) return false;
  if (!("endDate" in value) || value["endDate"] === undefined) return false;
  if (!("proposalStatus" in value) || value["proposalStatus"] === undefined) return false;
  return true;
}

export function ToProjectFromJSON(json: any): ToProject {
  return ToProjectFromJSONTyped(json, false);
}

export function ToProjectFromJSONTyped(json: any, ignoreDiscriminator: boolean): ToProject {
  if (json == null) {
    return json;
  }
  return {
    id: json["id"],
    title: json["title"],
    description: json["description"],
    startDate: new Date(json["startDate"]),
    endDate: new Date(json["endDate"]),
    minBudget: json["minBudget"] == null ? undefined : json["minBudget"],
    maxBudget: json["maxBudget"] == null ? undefined : json["maxBudget"],
    proposalStatus: json["proposalStatus"],
  };
}

export function ToProjectToJSON(json: any): ToProject {
  return ToProjectToJSONTyped(json, false);
}

export function ToProjectToJSONTyped(
  value?: ToProject | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    id: value["id"],
    title: value["title"],
    description: value["description"],
    startDate: value["startDate"].toISOString().substring(0, 10),
    endDate: value["endDate"].toISOString().substring(0, 10),
    minBudget: value["minBudget"],
    maxBudget: value["maxBudget"],
    proposalStatus: value["proposalStatus"],
  };
}
