// Package businessapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package businessapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
)

// CompanySignInBadRequestResponse defines model for CompanySignInBadRequestResponse.
type CompanySignInBadRequestResponse struct {
	Errors []string `json:"errors"`
}

// CompanySignInInput defines model for CompanySignInInput.
type CompanySignInInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// CompanySignInOkResponse defines model for CompanySignInOkResponse.
type CompanySignInOkResponse = map[string]interface{}

// CsrfResponse defines model for CsrfResponse.
type CsrfResponse struct {
	CsrfToken string `json:"csrfToken"`
}

// Plan defines model for Plan.
type Plan struct {
	CreatedAt   time.Time          `json:"createdAt"`
	Description string             `json:"description"`
	EndDate     openapi_types.Date `json:"endDate"`
	Id          int                `json:"id"`
	ProjectId   int                `json:"projectId"`
	StartDate   openapi_types.Date `json:"startDate"`
	Title       string             `json:"title"`
	UnitPrice   int                `json:"unitPrice"`
}

// PlanStoreInput defines model for PlanStoreInput.
type PlanStoreInput struct {
	Description string             `json:"description"`
	EndDate     openapi_types.Date `json:"endDate"`
	ProjectId   int                `json:"projectId"`
	StartDate   openapi_types.Date `json:"startDate"`
	Title       string             `json:"title"`
	UnitPrice   int                `json:"unitPrice"`
}

// PlanStoreResponse defines model for PlanStoreResponse.
type PlanStoreResponse struct {
	Errors PlanValidationError `json:"errors"`
	Plan   Plan                `json:"plan"`
}

// PlanValidationError defines model for PlanValidationError.
type PlanValidationError struct {
	Description *[]string `json:"description,omitempty"`
	EndDate     *[]string `json:"endDate,omitempty"`
	StartDate   *[]string `json:"startDate,omitempty"`
	Title       *[]string `json:"title,omitempty"`
	UnitPrice   *[]string `json:"unitPrice,omitempty"`
}

// Project defines model for Project.
type Project struct {
	CreatedAt   time.Time          `json:"createdAt"`
	Description string             `json:"description"`
	EndDate     openapi_types.Date `json:"endDate"`
	Id          int                `json:"id"`
	IsActive    bool               `json:"isActive"`
	MaxBudget   *int               `json:"maxBudget,omitempty"`
	MinBudget   *int               `json:"minBudget,omitempty"`
	StartDate   openapi_types.Date `json:"startDate"`
	Title       string             `json:"title"`
}

// ProjectResponse defines model for ProjectResponse.
type ProjectResponse struct {
	Project Project `json:"project"`
}

// ProjectStoreInput defines model for ProjectStoreInput.
type ProjectStoreInput struct {
	Description string              `json:"description"`
	EndDate     *openapi_types.Date `json:"endDate,omitempty"`
	IsActive    *bool               `json:"isActive,omitempty"`
	MaxBudget   *int                `json:"maxBudget,omitempty"`
	MinBudget   *int                `json:"minBudget,omitempty"`
	StartDate   *openapi_types.Date `json:"startDate,omitempty"`
	Title       string              `json:"title"`
}

// ProjectStoreResponse defines model for ProjectStoreResponse.
type ProjectStoreResponse struct {
	Errors  ProjectValidationError `json:"errors"`
	Project Project                `json:"project"`
}

// ProjectValidationError defines model for ProjectValidationError.
type ProjectValidationError struct {
	Description *[]string `json:"description,omitempty"`
	EndDate     *[]string `json:"endDate,omitempty"`
	IsActive    *[]string `json:"isActive,omitempty"`
	MaxBudget   *[]string `json:"maxBudget,omitempty"`
	MinBudget   *[]string `json:"minBudget,omitempty"`
	StartDate   *[]string `json:"startDate,omitempty"`
	Title       *[]string `json:"title,omitempty"`
}

// ProjectsListResponse defines model for ProjectsListResponse.
type ProjectsListResponse struct {
	NextPageToken string    `json:"nextPageToken"`
	Projects      []Project `json:"projects"`
}

// SupporterSignInBadRequestResponse defines model for SupporterSignInBadRequestResponse.
type SupporterSignInBadRequestResponse struct {
	Errors []string `json:"errors"`
}

// SupporterSignInInput defines model for SupporterSignInInput.
type SupporterSignInInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// SupporterSignInOkResponse defines model for SupporterSignInOkResponse.
type SupporterSignInOkResponse = map[string]interface{}

// GetProjectsParams defines parameters for GetProjects.
type GetProjectsParams struct {
	PageToken *string `form:"pageToken,omitempty" json:"pageToken,omitempty"`
}

// PostCompaniesSignInJSONRequestBody defines body for PostCompaniesSignIn for application/json ContentType.
type PostCompaniesSignInJSONRequestBody = CompanySignInInput

// PostPlansJSONRequestBody defines body for PostPlans for application/json ContentType.
type PostPlansJSONRequestBody = PlanStoreInput

// PostProjectsJSONRequestBody defines body for PostProjects for application/json ContentType.
type PostProjectsJSONRequestBody = ProjectStoreInput

// PutProjectJSONRequestBody defines body for PutProject for application/json ContentType.
type PutProjectJSONRequestBody = ProjectStoreInput

// PostSupportersSignInJSONRequestBody defines body for PostSupportersSignIn for application/json ContentType.
type PostSupportersSignInJSONRequestBody = SupporterSignInInput

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Company Sign In
	// (POST /companies/sign-in)
	PostCompaniesSignIn(ctx echo.Context) error
	// Get Csrf
	// (GET /csrf)
	GetCsrf(ctx echo.Context) error
	// Create Plan
	// (POST /plans)
	PostPlans(ctx echo.Context) error
	// Create Project
	// (GET /projects)
	GetProjects(ctx echo.Context, params GetProjectsParams) error
	// Create Project
	// (POST /projects)
	PostProjects(ctx echo.Context) error
	// Get Project
	// (GET /projects/{id})
	GetProject(ctx echo.Context, id int) error
	// Update Project
	// (PUT /projects/{id})
	PutProject(ctx echo.Context, id int) error
	// Supporter Sign In
	// (POST /supporters/sign-in)
	PostSupportersSignIn(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostCompaniesSignIn converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompaniesSignIn(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostCompaniesSignIn(ctx)
	return err
}

// GetCsrf converts echo context to params.
func (w *ServerInterfaceWrapper) GetCsrf(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCsrf(ctx)
	return err
}

// PostPlans converts echo context to params.
func (w *ServerInterfaceWrapper) PostPlans(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostPlans(ctx)
	return err
}

// GetProjects converts echo context to params.
func (w *ServerInterfaceWrapper) GetProjects(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProjectsParams
	// ------------- Optional query parameter "pageToken" -------------

	err = runtime.BindQueryParameter("form", false, false, "pageToken", ctx.QueryParams(), &params.PageToken)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageToken: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProjects(ctx, params)
	return err
}

// PostProjects converts echo context to params.
func (w *ServerInterfaceWrapper) PostProjects(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostProjects(ctx)
	return err
}

// GetProject converts echo context to params.
func (w *ServerInterfaceWrapper) GetProject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProject(ctx, id)
	return err
}

// PutProject converts echo context to params.
func (w *ServerInterfaceWrapper) PutProject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutProject(ctx, id)
	return err
}

// PostSupportersSignIn converts echo context to params.
func (w *ServerInterfaceWrapper) PostSupportersSignIn(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSupportersSignIn(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/companies/sign-in", wrapper.PostCompaniesSignIn)
	router.GET(baseURL+"/csrf", wrapper.GetCsrf)
	router.POST(baseURL+"/plans", wrapper.PostPlans)
	router.GET(baseURL+"/projects", wrapper.GetProjects)
	router.POST(baseURL+"/projects", wrapper.PostProjects)
	router.GET(baseURL+"/projects/:id", wrapper.GetProject)
	router.PUT(baseURL+"/projects/:id", wrapper.PutProject)
	router.POST(baseURL+"/supporters/sign-in", wrapper.PostSupportersSignIn)

}

type PostCompaniesSignInRequestObject struct {
	Body *PostCompaniesSignInJSONRequestBody
}

type PostCompaniesSignInResponseObject interface {
	VisitPostCompaniesSignInResponse(w http.ResponseWriter) error
}

type PostCompaniesSignIn200ResponseHeaders struct {
	SetCookie string
}

type PostCompaniesSignIn200JSONResponse struct {
	Body    CompanySignInOkResponse
	Headers PostCompaniesSignIn200ResponseHeaders
}

func (response PostCompaniesSignIn200JSONResponse) VisitPostCompaniesSignInResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostCompaniesSignIn400JSONResponse CompanySignInBadRequestResponse

func (response PostCompaniesSignIn400JSONResponse) VisitPostCompaniesSignInResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostCompaniesSignIn500JSONResponse struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

func (response PostCompaniesSignIn500JSONResponse) VisitPostCompaniesSignInResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetCsrfRequestObject struct {
}

type GetCsrfResponseObject interface {
	VisitGetCsrfResponse(w http.ResponseWriter) error
}

type GetCsrf200JSONResponse CsrfResponse

func (response GetCsrf200JSONResponse) VisitGetCsrfResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCsrf500JSONResponse struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

func (response GetCsrf500JSONResponse) VisitGetCsrfResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostPlansRequestObject struct {
	Body *PostPlansJSONRequestBody
}

type PostPlansResponseObject interface {
	VisitPostPlansResponse(w http.ResponseWriter) error
}

type PostPlans200JSONResponse PlanStoreResponse

func (response PostPlans200JSONResponse) VisitPostPlansResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostPlans500JSONResponse struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

func (response PostPlans500JSONResponse) VisitPostPlansResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetProjectsRequestObject struct {
	Params GetProjectsParams
}

type GetProjectsResponseObject interface {
	VisitGetProjectsResponse(w http.ResponseWriter) error
}

type GetProjects200JSONResponse ProjectsListResponse

func (response GetProjects200JSONResponse) VisitGetProjectsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProjects500JSONResponse struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

func (response GetProjects500JSONResponse) VisitGetProjectsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostProjectsRequestObject struct {
	Body *PostProjectsJSONRequestBody
}

type PostProjectsResponseObject interface {
	VisitPostProjectsResponse(w http.ResponseWriter) error
}

type PostProjects200JSONResponse ProjectStoreResponse

func (response PostProjects200JSONResponse) VisitPostProjectsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostProjects500JSONResponse struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

func (response PostProjects500JSONResponse) VisitPostProjectsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetProjectRequestObject struct {
	Id int `json:"id"`
}

type GetProjectResponseObject interface {
	VisitGetProjectResponse(w http.ResponseWriter) error
}

type GetProject200JSONResponse ProjectResponse

func (response GetProject200JSONResponse) VisitGetProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetProject404JSONResponse struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

func (response GetProject404JSONResponse) VisitGetProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetProject500JSONResponse struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

func (response GetProject500JSONResponse) VisitGetProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PutProjectRequestObject struct {
	Id   int `json:"id"`
	Body *PutProjectJSONRequestBody
}

type PutProjectResponseObject interface {
	VisitPutProjectResponse(w http.ResponseWriter) error
}

type PutProject200JSONResponse ProjectStoreResponse

func (response PutProject200JSONResponse) VisitPutProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutProject404JSONResponse struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

func (response PutProject404JSONResponse) VisitPutProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutProject500JSONResponse struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

func (response PutProject500JSONResponse) VisitPutProjectResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostSupportersSignInRequestObject struct {
	Body *PostSupportersSignInJSONRequestBody
}

type PostSupportersSignInResponseObject interface {
	VisitPostSupportersSignInResponse(w http.ResponseWriter) error
}

type PostSupportersSignIn200ResponseHeaders struct {
	SetCookie string
}

type PostSupportersSignIn200JSONResponse struct {
	Body    SupporterSignInOkResponse
	Headers PostSupportersSignIn200ResponseHeaders
}

func (response PostSupportersSignIn200JSONResponse) VisitPostSupportersSignInResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostSupportersSignIn400JSONResponse SupporterSignInBadRequestResponse

func (response PostSupportersSignIn400JSONResponse) VisitPostSupportersSignInResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostSupportersSignIn500JSONResponse struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

func (response PostSupportersSignIn500JSONResponse) VisitPostSupportersSignInResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Company Sign In
	// (POST /companies/sign-in)
	PostCompaniesSignIn(ctx context.Context, request PostCompaniesSignInRequestObject) (PostCompaniesSignInResponseObject, error)
	// Get Csrf
	// (GET /csrf)
	GetCsrf(ctx context.Context, request GetCsrfRequestObject) (GetCsrfResponseObject, error)
	// Create Plan
	// (POST /plans)
	PostPlans(ctx context.Context, request PostPlansRequestObject) (PostPlansResponseObject, error)
	// Create Project
	// (GET /projects)
	GetProjects(ctx context.Context, request GetProjectsRequestObject) (GetProjectsResponseObject, error)
	// Create Project
	// (POST /projects)
	PostProjects(ctx context.Context, request PostProjectsRequestObject) (PostProjectsResponseObject, error)
	// Get Project
	// (GET /projects/{id})
	GetProject(ctx context.Context, request GetProjectRequestObject) (GetProjectResponseObject, error)
	// Update Project
	// (PUT /projects/{id})
	PutProject(ctx context.Context, request PutProjectRequestObject) (PutProjectResponseObject, error)
	// Supporter Sign In
	// (POST /supporters/sign-in)
	PostSupportersSignIn(ctx context.Context, request PostSupportersSignInRequestObject) (PostSupportersSignInResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostCompaniesSignIn operation middleware
func (sh *strictHandler) PostCompaniesSignIn(ctx echo.Context) error {
	var request PostCompaniesSignInRequestObject

	var body PostCompaniesSignInJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostCompaniesSignIn(ctx.Request().Context(), request.(PostCompaniesSignInRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCompaniesSignIn")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostCompaniesSignInResponseObject); ok {
		return validResponse.VisitPostCompaniesSignInResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetCsrf operation middleware
func (sh *strictHandler) GetCsrf(ctx echo.Context) error {
	var request GetCsrfRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCsrf(ctx.Request().Context(), request.(GetCsrfRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCsrf")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCsrfResponseObject); ok {
		return validResponse.VisitGetCsrfResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostPlans operation middleware
func (sh *strictHandler) PostPlans(ctx echo.Context) error {
	var request PostPlansRequestObject

	var body PostPlansJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostPlans(ctx.Request().Context(), request.(PostPlansRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostPlans")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostPlansResponseObject); ok {
		return validResponse.VisitPostPlansResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetProjects operation middleware
func (sh *strictHandler) GetProjects(ctx echo.Context, params GetProjectsParams) error {
	var request GetProjectsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetProjects(ctx.Request().Context(), request.(GetProjectsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProjects")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetProjectsResponseObject); ok {
		return validResponse.VisitGetProjectsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostProjects operation middleware
func (sh *strictHandler) PostProjects(ctx echo.Context) error {
	var request PostProjectsRequestObject

	var body PostProjectsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostProjects(ctx.Request().Context(), request.(PostProjectsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostProjects")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostProjectsResponseObject); ok {
		return validResponse.VisitPostProjectsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetProject operation middleware
func (sh *strictHandler) GetProject(ctx echo.Context, id int) error {
	var request GetProjectRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetProject(ctx.Request().Context(), request.(GetProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetProject")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetProjectResponseObject); ok {
		return validResponse.VisitGetProjectResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PutProject operation middleware
func (sh *strictHandler) PutProject(ctx echo.Context, id int) error {
	var request PutProjectRequestObject

	request.Id = id

	var body PutProjectJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutProject(ctx.Request().Context(), request.(PutProjectRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutProject")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PutProjectResponseObject); ok {
		return validResponse.VisitPutProjectResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostSupportersSignIn operation middleware
func (sh *strictHandler) PostSupportersSignIn(ctx echo.Context) error {
	var request PostSupportersSignInRequestObject

	var body PostSupportersSignInJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostSupportersSignIn(ctx.Request().Context(), request.(PostSupportersSignInRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSupportersSignIn")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostSupportersSignInResponseObject); ok {
		return validResponse.VisitPostSupportersSignInResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZXW/bNhf+KwLf99KN060DCt0l2VAEG1Cj7nYT+IKRjm02EsmQR1kMw/99IClLlETZ",
	"chOnSZM7RxIPz8dznvORNUlELgUHjprEa6KTJeTU/rwQuaR8NWULfsnPafoFbgvQ+AW0FFyD+UQqIUEh",
	"A3sAlBLK/mIIuf2BKwkkJhoV4wuyGW0fUKXoimw2I6LgtmAKUhJfbQXMRgQZZua7UofIKRHVWvxhPo0q",
	"XSrB4vobJGhuaqh/yWWBAY1zyrKgnpJq/a9QaeBlW2krwzvRr77TYp+un298F/eI+nyz23it5v2BSrSa",
	"fxU3wPdbV3/qm+VLD9w+ySgP3KqAIqRnNg5zoXKKJCYpRXiHLPcE1VFIQSeKSWSCB6MEPP2dInQEhmQx",
	"P5aMIyxA2UgrYfS+7HmtkSocfEnpoYCqBWc4USyB0DUtp7OU+HptxTb94atWe8K/aOS53IuejU5P1KYo",
	"FPQky2MG4xk6/eH+bvk4ss7sT/rK30MY9f8K5iQm/xvXdD0uuXpsBP1DM5ZSo6hlRuvjMgv3He16wgGk",
	"y8aeVfvSv63PPjQNrRgNmA0/1ADU8GMVsoYfaUDugDrY8HHtvci5L+Rlh9cXw7NMnyXI7vxUvBYiAwPA",
	"Ecnp/XmRLgDDh3PGd71+HL4IsfAhTFBZ2Ee8ZcT6g9nPBLKO9s58Lj/rIbeANrsz2X3zVFXhxUEkhI6A",
	"i/cVAs/LD64FTlaoHDwOgoJ1oWHnAEA9s+rg4274qQYeDzjm4/T5VbBNN6wHVCP9F9s1IXK4xwldQN/w",
	"UaG0OUUOwuue2bISPGpp0cWxjowVO3E8LaQUCkH90Om40uJ75uOWCT9oQu6Y0MuSLX3DU3JH3M452aQV",
	"JIViuJoaODmTzyT7E1ZnBS5tsDiJSSLEDTMCOM2NALTIqeNlT5CNEcj4XHQYjFwXmnHQOjqbXGpSm3++",
	"fT4FdedmtjtQ2h16f3JqDBcSOJWMxOTXE/PIOBKXVlWbEJQz0GPNFvwdc2O30DaSJo42bc2YRSZC48X2",
	"c+cd4uIEGs9FurK9o+AI3J6mUmYssefH37TjYZd0+1IysHnZNDGBqgD7wEXG2vLL6elxNPCQYtVoRubr",
	"EqLSCdGS6kgXSQKQQnpCRmQJNAWXtFPAdxcOBvG6ZcrIU6udCubGD8cyLcA7PSZqUHegokQUWRpxgVHB",
	"jWVIeRqh54K0gAhFxPidIf1IrzjS+xMDw98ONKI1lIgUevo20JouBjRbVkT9/aybzh3Lp85qcD2QSfci",
	"z6latfZpkU0FpAvt7imThMzMkXGi1dxoV5bsZlZ9Arww748JZn/bdhiCf76wfQKMSodX8TJ/ulDJjHK9",
	"mwIn9pPjEF9rg/bEpNfdJ71SsJQlncRXzWJ+NdvMGhRgh/Rouw8t4eQwVOLJ60b70n9SN5aSKpoD2opx",
	"tSZwLzPrkjnNNIxcK3FbgFrVnYSs+tBdRWR2TNiEOvc35AxCTr3Q2YJnC4aZ6ZD7SajGzFF4qLO2eWoq",
	"Cm003jD1YEz5nDRes3QzgJi6vGR5yMwQNQ3ZXefeprb+18kTENL34+bD6YcXhxu/R6fcNOhz1mzNIY0U",
	"aFGoBF5hdpi+bx/dFiG2LY6fB28E/paIryYR/5bpoDKlt5u4gaupanN33N1UcOv5xMnVv8n8CfZT+zfj",
	"bxuqYauO5i67uaOqs8ukm81fI8fVtUJlJCZLRKnj8TgTCc2WQmP88fTje2KyuZSy3la9euO1GdUPtZr7",
	"f3tXek+rrPef2Ql6M9v8FwAA//8FHvbgXSgAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
