// Package registrationapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package registrationapi

import (
	"context"
	"encoding/json"
	"fmt"
	"mime/multipart"
	"net/http"

	"github.com/labstack/echo/v4"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// CompanySignUpValidationError defines model for CompanySignUpValidationError.
type CompanySignUpValidationError struct {
	Email          *[]string `json:"email,omitempty"`
	FinalTaxReturn *[]string `json:"finalTaxReturn,omitempty"`
	Name           *[]string `json:"name,omitempty"`
	Password       *[]string `json:"password,omitempty"`
}

// SuppoterSignUpValidationError defines model for SuppoterSignUpValidationError.
type SuppoterSignUpValidationError struct {
	BackIdentification  *[]string `json:"backIdentification,omitempty"`
	Birthday            *[]string `json:"birthday,omitempty"`
	Email               *[]string `json:"email,omitempty"`
	FirstName           *[]string `json:"firstName,omitempty"`
	FrontIdentification *[]string `json:"frontIdentification,omitempty"`
	LastName            *[]string `json:"lastName,omitempty"`
	Password            *[]string `json:"password,omitempty"`
}

// CompanySignUpResponse defines model for CompanySignUpResponse.
type CompanySignUpResponse struct {
	Code   int                          `json:"code"`
	Errors CompanySignUpValidationError `json:"errors"`
}

// CsrfResponse defines model for CsrfResponse.
type CsrfResponse struct {
	CsrfToken string `json:"csrfToken"`
}

// InternalServerErrorResponse defines model for InternalServerErrorResponse.
type InternalServerErrorResponse struct {
	Code    int64  `json:"code"`
	Message string `json:"message"`
}

// SupporterSignUpResponse defines model for SupporterSignUpResponse.
type SupporterSignUpResponse struct {
	Code   int                           `json:"code"`
	Errors SuppoterSignUpValidationError `json:"errors"`
}

// PostCompanySignUpMultipartBody defines parameters for PostCompanySignUp.
type PostCompanySignUpMultipartBody struct {
	Email          string              `json:"email"`
	FinalTaxReturn *openapi_types.File `json:"finalTaxReturn,omitempty"`
	Name           string              `json:"name"`
	Password       string              `json:"password"`
}

// PostCompanyValidateSignUpMultipartBody defines parameters for PostCompanyValidateSignUp.
type PostCompanyValidateSignUpMultipartBody struct {
	Email          string              `json:"email"`
	FinalTaxReturn *openapi_types.File `json:"finalTaxReturn,omitempty"`
	Name           string              `json:"name"`
	Password       string              `json:"password"`
}

// PostSupporterSignUpMultipartBody defines parameters for PostSupporterSignUp.
type PostSupporterSignUpMultipartBody struct {
	BackIdentification  *openapi_types.File `json:"backIdentification,omitempty"`
	Birthday            *openapi_types.Date `json:"birthday,omitempty"`
	Email               string              `json:"email"`
	FirstName           string              `json:"firstName"`
	FrontIdentification *openapi_types.File `json:"frontIdentification,omitempty"`
	LastName            string              `json:"lastName"`
	Password            string              `json:"password"`
}

// PostSupporterValidateSignUpMultipartBody defines parameters for PostSupporterValidateSignUp.
type PostSupporterValidateSignUpMultipartBody struct {
	BackIdentification  *openapi_types.File `json:"backIdentification,omitempty"`
	Birthday            *openapi_types.Date `json:"birthday,omitempty"`
	Email               string              `json:"email"`
	FirstName           string              `json:"firstName"`
	FrontIdentification *openapi_types.File `json:"frontIdentification,omitempty"`
	LastName            string              `json:"lastName"`
	Password            string              `json:"password"`
}

// PostCompanySignUpMultipartRequestBody defines body for PostCompanySignUp for multipart/form-data ContentType.
type PostCompanySignUpMultipartRequestBody PostCompanySignUpMultipartBody

// PostCompanyValidateSignUpMultipartRequestBody defines body for PostCompanyValidateSignUp for multipart/form-data ContentType.
type PostCompanyValidateSignUpMultipartRequestBody PostCompanyValidateSignUpMultipartBody

// PostSupporterSignUpMultipartRequestBody defines body for PostSupporterSignUp for multipart/form-data ContentType.
type PostSupporterSignUpMultipartRequestBody PostSupporterSignUpMultipartBody

// PostSupporterValidateSignUpMultipartRequestBody defines body for PostSupporterValidateSignUp for multipart/form-data ContentType.
type PostSupporterValidateSignUpMultipartRequestBody PostSupporterValidateSignUpMultipartBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// SignUp
	// (POST /companies/signUp)
	PostCompanySignUp(ctx echo.Context) error
	// Validate SignUp
	// (POST /companies/validateSignUp)
	PostCompanyValidateSignUp(ctx echo.Context) error
	// Get Csrf
	// (GET /csrf)
	GetCsrf(ctx echo.Context) error
	// SignUp
	// (POST /supporters/signUp)
	PostSupporterSignUp(ctx echo.Context) error
	// Validate SignUp
	// (POST /supporters/validateSignUp)
	PostSupporterValidateSignUp(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostCompanySignUp converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompanySignUp(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostCompanySignUp(ctx)
	return err
}

// PostCompanyValidateSignUp converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompanyValidateSignUp(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostCompanyValidateSignUp(ctx)
	return err
}

// GetCsrf converts echo context to params.
func (w *ServerInterfaceWrapper) GetCsrf(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCsrf(ctx)
	return err
}

// PostSupporterSignUp converts echo context to params.
func (w *ServerInterfaceWrapper) PostSupporterSignUp(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSupporterSignUp(ctx)
	return err
}

// PostSupporterValidateSignUp converts echo context to params.
func (w *ServerInterfaceWrapper) PostSupporterValidateSignUp(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSupporterValidateSignUp(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/companies/signUp", wrapper.PostCompanySignUp)
	router.POST(baseURL+"/companies/validateSignUp", wrapper.PostCompanyValidateSignUp)
	router.GET(baseURL+"/csrf", wrapper.GetCsrf)
	router.POST(baseURL+"/supporters/signUp", wrapper.PostSupporterSignUp)
	router.POST(baseURL+"/supporters/validateSignUp", wrapper.PostSupporterValidateSignUp)

}

type CompanySignUpResponseJSONResponse struct {
	Code   int                          `json:"code"`
	Errors CompanySignUpValidationError `json:"errors"`
}

type CsrfResponseJSONResponse struct {
	CsrfToken string `json:"csrfToken"`
}

type InternalServerErrorResponseJSONResponse struct {
	Code    int64  `json:"code"`
	Message string `json:"message"`
}

type SupporterSignUpResponseJSONResponse struct {
	Code   int                           `json:"code"`
	Errors SuppoterSignUpValidationError `json:"errors"`
}

type PostCompanySignUpRequestObject struct {
	Body *multipart.Reader
}

type PostCompanySignUpResponseObject interface {
	VisitPostCompanySignUpResponse(w http.ResponseWriter) error
}

type PostCompanySignUp200JSONResponse struct {
	CompanySignUpResponseJSONResponse
}

func (response PostCompanySignUp200JSONResponse) VisitPostCompanySignUpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostCompanySignUp400JSONResponse struct {
	Code   int                          `json:"code"`
	Errors CompanySignUpValidationError `json:"errors"`
}

func (response PostCompanySignUp400JSONResponse) VisitPostCompanySignUpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostCompanySignUp500JSONResponse struct {
	InternalServerErrorResponseJSONResponse
}

func (response PostCompanySignUp500JSONResponse) VisitPostCompanySignUpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostCompanyValidateSignUpRequestObject struct {
	Body *multipart.Reader
}

type PostCompanyValidateSignUpResponseObject interface {
	VisitPostCompanyValidateSignUpResponse(w http.ResponseWriter) error
}

type PostCompanyValidateSignUp200JSONResponse struct {
	CompanySignUpResponseJSONResponse
}

func (response PostCompanyValidateSignUp200JSONResponse) VisitPostCompanyValidateSignUpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostCompanyValidateSignUp400JSONResponse struct {
	Code   int                          `json:"code"`
	Errors CompanySignUpValidationError `json:"errors"`
}

func (response PostCompanyValidateSignUp400JSONResponse) VisitPostCompanyValidateSignUpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostCompanyValidateSignUp500JSONResponse struct {
	InternalServerErrorResponseJSONResponse
}

func (response PostCompanyValidateSignUp500JSONResponse) VisitPostCompanyValidateSignUpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetCsrfRequestObject struct {
}

type GetCsrfResponseObject interface {
	VisitGetCsrfResponse(w http.ResponseWriter) error
}

type GetCsrf200JSONResponse struct{ CsrfResponseJSONResponse }

func (response GetCsrf200JSONResponse) VisitGetCsrfResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCsrf500JSONResponse struct {
	InternalServerErrorResponseJSONResponse
}

func (response GetCsrf500JSONResponse) VisitGetCsrfResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostSupporterSignUpRequestObject struct {
	Body *multipart.Reader
}

type PostSupporterSignUpResponseObject interface {
	VisitPostSupporterSignUpResponse(w http.ResponseWriter) error
}

type PostSupporterSignUp200JSONResponse struct {
	SupporterSignUpResponseJSONResponse
}

func (response PostSupporterSignUp200JSONResponse) VisitPostSupporterSignUpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostSupporterSignUp400JSONResponse struct {
	Code   int                           `json:"code"`
	Errors SuppoterSignUpValidationError `json:"errors"`
}

func (response PostSupporterSignUp400JSONResponse) VisitPostSupporterSignUpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostSupporterSignUp500JSONResponse struct {
	InternalServerErrorResponseJSONResponse
}

func (response PostSupporterSignUp500JSONResponse) VisitPostSupporterSignUpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostSupporterValidateSignUpRequestObject struct {
	Body *multipart.Reader
}

type PostSupporterValidateSignUpResponseObject interface {
	VisitPostSupporterValidateSignUpResponse(w http.ResponseWriter) error
}

type PostSupporterValidateSignUp200JSONResponse struct {
	SupporterSignUpResponseJSONResponse
}

func (response PostSupporterValidateSignUp200JSONResponse) VisitPostSupporterValidateSignUpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostSupporterValidateSignUp400JSONResponse struct {
	Code   int                           `json:"code"`
	Errors SuppoterSignUpValidationError `json:"errors"`
}

func (response PostSupporterValidateSignUp400JSONResponse) VisitPostSupporterValidateSignUpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostSupporterValidateSignUp500JSONResponse struct {
	InternalServerErrorResponseJSONResponse
}

func (response PostSupporterValidateSignUp500JSONResponse) VisitPostSupporterValidateSignUpResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// SignUp
	// (POST /companies/signUp)
	PostCompanySignUp(ctx context.Context, request PostCompanySignUpRequestObject) (PostCompanySignUpResponseObject, error)
	// Validate SignUp
	// (POST /companies/validateSignUp)
	PostCompanyValidateSignUp(ctx context.Context, request PostCompanyValidateSignUpRequestObject) (PostCompanyValidateSignUpResponseObject, error)
	// Get Csrf
	// (GET /csrf)
	GetCsrf(ctx context.Context, request GetCsrfRequestObject) (GetCsrfResponseObject, error)
	// SignUp
	// (POST /supporters/signUp)
	PostSupporterSignUp(ctx context.Context, request PostSupporterSignUpRequestObject) (PostSupporterSignUpResponseObject, error)
	// Validate SignUp
	// (POST /supporters/validateSignUp)
	PostSupporterValidateSignUp(ctx context.Context, request PostSupporterValidateSignUpRequestObject) (PostSupporterValidateSignUpResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostCompanySignUp operation middleware
func (sh *strictHandler) PostCompanySignUp(ctx echo.Context) error {
	var request PostCompanySignUpRequestObject

	if reader, err := ctx.Request().MultipartReader(); err != nil {
		return err
	} else {
		request.Body = reader
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostCompanySignUp(ctx.Request().Context(), request.(PostCompanySignUpRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCompanySignUp")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostCompanySignUpResponseObject); ok {
		return validResponse.VisitPostCompanySignUpResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostCompanyValidateSignUp operation middleware
func (sh *strictHandler) PostCompanyValidateSignUp(ctx echo.Context) error {
	var request PostCompanyValidateSignUpRequestObject

	if reader, err := ctx.Request().MultipartReader(); err != nil {
		return err
	} else {
		request.Body = reader
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostCompanyValidateSignUp(ctx.Request().Context(), request.(PostCompanyValidateSignUpRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCompanyValidateSignUp")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostCompanyValidateSignUpResponseObject); ok {
		return validResponse.VisitPostCompanyValidateSignUpResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetCsrf operation middleware
func (sh *strictHandler) GetCsrf(ctx echo.Context) error {
	var request GetCsrfRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCsrf(ctx.Request().Context(), request.(GetCsrfRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCsrf")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCsrfResponseObject); ok {
		return validResponse.VisitGetCsrfResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostSupporterSignUp operation middleware
func (sh *strictHandler) PostSupporterSignUp(ctx echo.Context) error {
	var request PostSupporterSignUpRequestObject

	if reader, err := ctx.Request().MultipartReader(); err != nil {
		return err
	} else {
		request.Body = reader
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostSupporterSignUp(ctx.Request().Context(), request.(PostSupporterSignUpRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSupporterSignUp")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostSupporterSignUpResponseObject); ok {
		return validResponse.VisitPostSupporterSignUpResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostSupporterValidateSignUp operation middleware
func (sh *strictHandler) PostSupporterValidateSignUp(ctx echo.Context) error {
	var request PostSupporterValidateSignUpRequestObject

	if reader, err := ctx.Request().MultipartReader(); err != nil {
		return err
	} else {
		request.Body = reader
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostSupporterValidateSignUp(ctx.Request().Context(), request.(PostSupporterValidateSignUpRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSupporterValidateSignUp")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostSupporterValidateSignUpResponseObject); ok {
		return validResponse.VisitPostSupporterValidateSignUpResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
