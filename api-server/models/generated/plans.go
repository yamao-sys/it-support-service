// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Plan is an object representing the database table.
type Plan struct {
	ID          int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	SupporterID int       `boil:"supporter_id" json:"supporter_id" toml:"supporter_id" yaml:"supporter_id"`
	ProjectID   int       `boil:"project_id" json:"project_id" toml:"project_id" yaml:"project_id"`
	Title       string    `boil:"title" json:"title" toml:"title" yaml:"title"`
	Description string    `boil:"description" json:"description" toml:"description" yaml:"description"`
	StartDate   time.Time `boil:"start_date" json:"start_date" toml:"start_date" yaml:"start_date"`
	EndDate     time.Time `boil:"end_date" json:"end_date" toml:"end_date" yaml:"end_date"`
	UnitPrice   null.Int  `boil:"unit_price" json:"unit_price,omitempty" toml:"unit_price" yaml:"unit_price,omitempty"`
	Status      int       `boil:"status" json:"status" toml:"status" yaml:"status"`
	AgreedAt    null.Time `boil:"agreed_at" json:"agreed_at,omitempty" toml:"agreed_at" yaml:"agreed_at,omitempty"`
	CreatedAt   time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *planR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L planL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PlanColumns = struct {
	ID          string
	SupporterID string
	ProjectID   string
	Title       string
	Description string
	StartDate   string
	EndDate     string
	UnitPrice   string
	Status      string
	AgreedAt    string
	CreatedAt   string
	UpdatedAt   string
}{
	ID:          "id",
	SupporterID: "supporter_id",
	ProjectID:   "project_id",
	Title:       "title",
	Description: "description",
	StartDate:   "start_date",
	EndDate:     "end_date",
	UnitPrice:   "unit_price",
	Status:      "status",
	AgreedAt:    "agreed_at",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
}

var PlanTableColumns = struct {
	ID          string
	SupporterID string
	ProjectID   string
	Title       string
	Description string
	StartDate   string
	EndDate     string
	UnitPrice   string
	Status      string
	AgreedAt    string
	CreatedAt   string
	UpdatedAt   string
}{
	ID:          "plans.id",
	SupporterID: "plans.supporter_id",
	ProjectID:   "plans.project_id",
	Title:       "plans.title",
	Description: "plans.description",
	StartDate:   "plans.start_date",
	EndDate:     "plans.end_date",
	UnitPrice:   "plans.unit_price",
	Status:      "plans.status",
	AgreedAt:    "plans.agreed_at",
	CreatedAt:   "plans.created_at",
	UpdatedAt:   "plans.updated_at",
}

// Generated where

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var PlanWhere = struct {
	ID          whereHelperint
	SupporterID whereHelperint
	ProjectID   whereHelperint
	Title       whereHelperstring
	Description whereHelperstring
	StartDate   whereHelpertime_Time
	EndDate     whereHelpertime_Time
	UnitPrice   whereHelpernull_Int
	Status      whereHelperint
	AgreedAt    whereHelpernull_Time
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpertime_Time
}{
	ID:          whereHelperint{field: "`plans`.`id`"},
	SupporterID: whereHelperint{field: "`plans`.`supporter_id`"},
	ProjectID:   whereHelperint{field: "`plans`.`project_id`"},
	Title:       whereHelperstring{field: "`plans`.`title`"},
	Description: whereHelperstring{field: "`plans`.`description`"},
	StartDate:   whereHelpertime_Time{field: "`plans`.`start_date`"},
	EndDate:     whereHelpertime_Time{field: "`plans`.`end_date`"},
	UnitPrice:   whereHelpernull_Int{field: "`plans`.`unit_price`"},
	Status:      whereHelperint{field: "`plans`.`status`"},
	AgreedAt:    whereHelpernull_Time{field: "`plans`.`agreed_at`"},
	CreatedAt:   whereHelpertime_Time{field: "`plans`.`created_at`"},
	UpdatedAt:   whereHelpertime_Time{field: "`plans`.`updated_at`"},
}

// PlanRels is where relationship names are stored.
var PlanRels = struct {
	Supporter string
}{
	Supporter: "Supporter",
}

// planR is where relationships are stored.
type planR struct {
	Supporter *Supporter `boil:"Supporter" json:"Supporter" toml:"Supporter" yaml:"Supporter"`
}

// NewStruct creates a new relationship struct
func (*planR) NewStruct() *planR {
	return &planR{}
}

func (r *planR) GetSupporter() *Supporter {
	if r == nil {
		return nil
	}
	return r.Supporter
}

// planL is where Load methods for each relationship are stored.
type planL struct{}

var (
	planAllColumns            = []string{"id", "supporter_id", "project_id", "title", "description", "start_date", "end_date", "unit_price", "status", "agreed_at", "created_at", "updated_at"}
	planColumnsWithoutDefault = []string{"supporter_id", "project_id", "title", "description", "start_date", "end_date", "unit_price", "agreed_at", "created_at", "updated_at"}
	planColumnsWithDefault    = []string{"id", "status"}
	planPrimaryKeyColumns     = []string{"id"}
	planGeneratedColumns      = []string{}
)

type (
	// PlanSlice is an alias for a slice of pointers to Plan.
	// This should almost always be used instead of []Plan.
	PlanSlice []*Plan
	// PlanHook is the signature for custom Plan hook methods
	PlanHook func(context.Context, boil.ContextExecutor, *Plan) error

	planQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	planType                 = reflect.TypeOf(&Plan{})
	planMapping              = queries.MakeStructMapping(planType)
	planPrimaryKeyMapping, _ = queries.BindMapping(planType, planMapping, planPrimaryKeyColumns)
	planInsertCacheMut       sync.RWMutex
	planInsertCache          = make(map[string]insertCache)
	planUpdateCacheMut       sync.RWMutex
	planUpdateCache          = make(map[string]updateCache)
	planUpsertCacheMut       sync.RWMutex
	planUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var planAfterSelectMu sync.Mutex
var planAfterSelectHooks []PlanHook

var planBeforeInsertMu sync.Mutex
var planBeforeInsertHooks []PlanHook
var planAfterInsertMu sync.Mutex
var planAfterInsertHooks []PlanHook

var planBeforeUpdateMu sync.Mutex
var planBeforeUpdateHooks []PlanHook
var planAfterUpdateMu sync.Mutex
var planAfterUpdateHooks []PlanHook

var planBeforeDeleteMu sync.Mutex
var planBeforeDeleteHooks []PlanHook
var planAfterDeleteMu sync.Mutex
var planAfterDeleteHooks []PlanHook

var planBeforeUpsertMu sync.Mutex
var planBeforeUpsertHooks []PlanHook
var planAfterUpsertMu sync.Mutex
var planAfterUpsertHooks []PlanHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Plan) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Plan) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Plan) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Plan) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Plan) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Plan) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Plan) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Plan) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Plan) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPlanHook registers your hook function for all future operations.
func AddPlanHook(hookPoint boil.HookPoint, planHook PlanHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		planAfterSelectMu.Lock()
		planAfterSelectHooks = append(planAfterSelectHooks, planHook)
		planAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		planBeforeInsertMu.Lock()
		planBeforeInsertHooks = append(planBeforeInsertHooks, planHook)
		planBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		planAfterInsertMu.Lock()
		planAfterInsertHooks = append(planAfterInsertHooks, planHook)
		planAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		planBeforeUpdateMu.Lock()
		planBeforeUpdateHooks = append(planBeforeUpdateHooks, planHook)
		planBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		planAfterUpdateMu.Lock()
		planAfterUpdateHooks = append(planAfterUpdateHooks, planHook)
		planAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		planBeforeDeleteMu.Lock()
		planBeforeDeleteHooks = append(planBeforeDeleteHooks, planHook)
		planBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		planAfterDeleteMu.Lock()
		planAfterDeleteHooks = append(planAfterDeleteHooks, planHook)
		planAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		planBeforeUpsertMu.Lock()
		planBeforeUpsertHooks = append(planBeforeUpsertHooks, planHook)
		planBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		planAfterUpsertMu.Lock()
		planAfterUpsertHooks = append(planAfterUpsertHooks, planHook)
		planAfterUpsertMu.Unlock()
	}
}

// One returns a single plan record from the query.
func (q planQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Plan, error) {
	o := &Plan{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for plans")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Plan records from the query.
func (q planQuery) All(ctx context.Context, exec boil.ContextExecutor) (PlanSlice, error) {
	var o []*Plan

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Plan slice")
	}

	if len(planAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Plan records in the query.
func (q planQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count plans rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q planQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if plans exists")
	}

	return count > 0, nil
}

// Supporter pointed to by the foreign key.
func (o *Plan) Supporter(mods ...qm.QueryMod) supporterQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.SupporterID),
	}

	queryMods = append(queryMods, mods...)

	return Supporters(queryMods...)
}

// LoadSupporter allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (planL) LoadSupporter(ctx context.Context, e boil.ContextExecutor, singular bool, maybePlan interface{}, mods queries.Applicator) error {
	var slice []*Plan
	var object *Plan

	if singular {
		var ok bool
		object, ok = maybePlan.(*Plan)
		if !ok {
			object = new(Plan)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePlan)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePlan))
			}
		}
	} else {
		s, ok := maybePlan.(*[]*Plan)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePlan)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePlan))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &planR{}
		}
		args[object.SupporterID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &planR{}
			}

			args[obj.SupporterID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`supporters`),
		qm.WhereIn(`supporters.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Supporter")
	}

	var resultSlice []*Supporter
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Supporter")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for supporters")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for supporters")
	}

	if len(supporterAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Supporter = foreign
		if foreign.R == nil {
			foreign.R = &supporterR{}
		}
		foreign.R.Plans = append(foreign.R.Plans, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SupporterID == foreign.ID {
				local.R.Supporter = foreign
				if foreign.R == nil {
					foreign.R = &supporterR{}
				}
				foreign.R.Plans = append(foreign.R.Plans, local)
				break
			}
		}
	}

	return nil
}

// SetSupporter of the plan to the related item.
// Sets o.R.Supporter to related.
// Adds o to related.R.Plans.
func (o *Plan) SetSupporter(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Supporter) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `plans` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"supporter_id"}),
		strmangle.WhereClause("`", "`", 0, planPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SupporterID = related.ID
	if o.R == nil {
		o.R = &planR{
			Supporter: related,
		}
	} else {
		o.R.Supporter = related
	}

	if related.R == nil {
		related.R = &supporterR{
			Plans: PlanSlice{o},
		}
	} else {
		related.R.Plans = append(related.R.Plans, o)
	}

	return nil
}

// Plans retrieves all the records using an executor.
func Plans(mods ...qm.QueryMod) planQuery {
	mods = append(mods, qm.From("`plans`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`plans`.*"})
	}

	return planQuery{q}
}

// FindPlan retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPlan(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Plan, error) {
	planObj := &Plan{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `plans` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, planObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from plans")
	}

	if err = planObj.doAfterSelectHooks(ctx, exec); err != nil {
		return planObj, err
	}

	return planObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Plan) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no plans provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(planColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	planInsertCacheMut.RLock()
	cache, cached := planInsertCache[key]
	planInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			planAllColumns,
			planColumnsWithDefault,
			planColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(planType, planMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(planType, planMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `plans` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `plans` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `plans` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, planPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into plans")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == planMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for plans")
	}

CacheNoHooks:
	if !cached {
		planInsertCacheMut.Lock()
		planInsertCache[key] = cache
		planInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Plan.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Plan) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	planUpdateCacheMut.RLock()
	cache, cached := planUpdateCache[key]
	planUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			planAllColumns,
			planPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update plans, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `plans` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, planPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(planType, planMapping, append(wl, planPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update plans row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for plans")
	}

	if !cached {
		planUpdateCacheMut.Lock()
		planUpdateCache[key] = cache
		planUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q planQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for plans")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for plans")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PlanSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), planPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `plans` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, planPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in plan slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all plan")
	}
	return rowsAff, nil
}

var mySQLPlanUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Plan) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no plans provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(planColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLPlanUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	planUpsertCacheMut.RLock()
	cache, cached := planUpsertCache[key]
	planUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			planAllColumns,
			planColumnsWithDefault,
			planColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			planAllColumns,
			planPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert plans, could not build update column list")
		}

		ret := strmangle.SetComplement(planAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`plans`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `plans` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(planType, planMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(planType, planMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for plans")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == planMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(planType, planMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for plans")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for plans")
	}

CacheNoHooks:
	if !cached {
		planUpsertCacheMut.Lock()
		planUpsertCache[key] = cache
		planUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Plan record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Plan) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Plan provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), planPrimaryKeyMapping)
	sql := "DELETE FROM `plans` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from plans")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for plans")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q planQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no planQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from plans")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for plans")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PlanSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(planBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), planPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `plans` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, planPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from plan slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for plans")
	}

	if len(planAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Plan) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPlan(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PlanSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PlanSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), planPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `plans`.* FROM `plans` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, planPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PlanSlice")
	}

	*o = slice

	return nil
}

// PlanExists checks if the Plan row exists.
func PlanExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `plans` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if plans exists")
	}

	return exists, nil
}

// Exists checks if the Plan row exists.
func (o *Plan) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PlanExists(ctx, exec, o.ID)
}

// /////////////////////////////// BEGIN EXTENSIONS /////////////////////////////////
// Expose table columns
var (
	PlanAllColumns            = planAllColumns
	PlanColumnsWithoutDefault = planColumnsWithoutDefault
	PlanColumnsWithDefault    = planColumnsWithDefault
	PlanPrimaryKeyColumns     = planPrimaryKeyColumns
	PlanGeneratedColumns      = planGeneratedColumns
)

// GetID get ID from model object
func (o *Plan) GetID() int {
	return o.ID
}

// GetIDs extract IDs from model objects
func (s PlanSlice) GetIDs() []int {
	result := make([]int, len(s))
	for i := range s {
		result[i] = s[i].ID
	}
	return result
}

// GetIntfIDs extract IDs from model objects as interface slice
func (s PlanSlice) GetIntfIDs() []interface{} {
	result := make([]interface{}, len(s))
	for i := range s {
		result[i] = s[i].ID
	}
	return result
}

// ToIDMap convert a slice of model objects to a map with ID as key
func (s PlanSlice) ToIDMap() map[int]*Plan {
	result := make(map[int]*Plan, len(s))
	for _, o := range s {
		result[o.ID] = o
	}
	return result
}

// ToUniqueItems construct a slice of unique items from the given slice
func (s PlanSlice) ToUniqueItems() PlanSlice {
	result := make(PlanSlice, 0, len(s))
	mapChk := make(map[int]struct{}, len(s))
	for i := len(s) - 1; i >= 0; i-- {
		o := s[i]
		if _, ok := mapChk[o.ID]; !ok {
			mapChk[o.ID] = struct{}{}
			result = append(result, o)
		}
	}
	return result
}

// FindItemByID find item by ID in the slice
func (s PlanSlice) FindItemByID(id int) *Plan {
	for _, o := range s {
		if o.ID == id {
			return o
		}
	}
	return nil
}

// FindMissingItemIDs find all item IDs that are not in the list
// NOTE: the input ID slice should contain unique values
func (s PlanSlice) FindMissingItemIDs(expectedIDs []int) []int {
	if len(s) == 0 {
		return expectedIDs
	}
	result := []int{}
	mapChk := s.ToIDMap()
	for _, id := range expectedIDs {
		if _, ok := mapChk[id]; !ok {
			result = append(result, id)
		}
	}
	return result
}

// InsertAll inserts all rows with the specified column values, using an executor.
// IMPORTANT: this will calculate the widest columns from all items in the slice, be careful if you want to use default column values
func (o PlanSlice) InsertAll(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	// Calculate the widest columns from all rows need to insert
	wlCols := make(map[string]struct{}, 10)
	for _, row := range o {
		wl, _ := columns.InsertColumnSet(
			planAllColumns,
			planColumnsWithDefault,
			planColumnsWithoutDefault,
			queries.NonZeroDefaultSet(planColumnsWithDefault, row),
		)
		for _, col := range wl {
			wlCols[col] = struct{}{}
		}
	}
	wl := make([]string, 0, len(wlCols))
	for _, col := range planAllColumns {
		if _, ok := wlCols[col]; ok {
			wl = append(wl, col)
		}
	}

	var sql string
	vals := []interface{}{}
	for i, row := range o {
		if !boil.TimestampsAreSkipped(ctx) {
			currTime := time.Now().In(boil.GetLocation())
			if row.CreatedAt.IsZero() {
				row.CreatedAt = currTime
			}
			if row.UpdatedAt.IsZero() {
				row.UpdatedAt = currTime
			}
		}

		if err := row.doBeforeInsertHooks(ctx, exec); err != nil {
			return 0, err
		}

		if i == 0 {
			sql = "INSERT INTO `plans` " + "(`" + strings.Join(wl, "`,`") + "`)" + " VALUES "
		}
		sql += strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), len(vals)+1, len(wl))
		if i != len(o)-1 {
			sql += ","
		}
		valMapping, err := queries.BindMapping(planType, planMapping, wl)
		if err != nil {
			return 0, err
		}

		value := reflect.Indirect(reflect.ValueOf(row))
		vals = append(vals, queries.ValuesFromMapping(value, valMapping)...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, vals)
	}

	result, err := exec.ExecContext(ctx, sql, vals...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to insert all from plan slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by insertall for plans")
	}

	if len(planAfterInsertHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterInsertHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// InsertIgnoreAll inserts all rows with ignoring the existing ones having the same primary key values.
// IMPORTANT: this will calculate the widest columns from all items in the slice, be careful if you want to use default column values
func (o PlanSlice) InsertIgnoreAll(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	return o.UpsertAll(ctx, exec, boil.None(), columns)
}

// UpsertAll inserts or updates all rows
// Currently it doesn't support "NoContext" and "NoRowsAffected"
// IMPORTANT: this will calculate the widest columns from all items in the slice, be careful if you want to use default column values
func (o PlanSlice) UpsertAll(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	// Calculate the widest columns from all rows need to upsert
	insertCols := make(map[string]struct{}, 10)
	for _, row := range o {
		nzUniques := queries.NonZeroDefaultSet(mySQLPlanUniqueColumns, row)
		if len(nzUniques) == 0 {
			return 0, errors.New("cannot upsert with a table that cannot conflict on a unique column")
		}
		insert, _ := insertColumns.InsertColumnSet(
			planAllColumns,
			planColumnsWithDefault,
			planColumnsWithoutDefault,
			queries.NonZeroDefaultSet(planColumnsWithDefault, row),
		)
		for _, col := range insert {
			insertCols[col] = struct{}{}
		}
	}
	insert := make([]string, 0, len(insertCols))
	for _, col := range planAllColumns {
		if _, ok := insertCols[col]; ok {
			insert = append(insert, col)
		}
	}

	update := updateColumns.UpdateColumnSet(
		planAllColumns,
		planPrimaryKeyColumns,
	)
	if !updateColumns.IsNone() && len(update) == 0 {
		return 0, errors.New("models: unable to upsert plans, could not build update column list")
	}

	buf := strmangle.GetBuffer()
	defer strmangle.PutBuffer(buf)

	if len(update) == 0 {
		fmt.Fprintf(
			buf,
			"INSERT IGNORE INTO `plans`(%s) VALUES %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, insert), ","),
			strmangle.Placeholders(false, len(insert)*len(o), 1, len(insert)),
		)
	} else {
		fmt.Fprintf(
			buf,
			"INSERT INTO `plans`(%s) VALUES %s ON DUPLICATE KEY UPDATE ",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, insert), ","),
			strmangle.Placeholders(false, len(insert)*len(o), 1, len(insert)),
		)

		for i, v := range update {
			if i != 0 {
				buf.WriteByte(',')
			}
			quoted := strmangle.IdentQuote(dialect.LQ, dialect.RQ, v)
			buf.WriteString(quoted)
			buf.WriteString(" = VALUES(")
			buf.WriteString(quoted)
			buf.WriteByte(')')
		}
	}

	query := buf.String()
	valueMapping, err := queries.BindMapping(planType, planMapping, insert)
	if err != nil {
		return 0, err
	}

	var vals []interface{}
	for _, row := range o {
		if !boil.TimestampsAreSkipped(ctx) {
			currTime := time.Now().In(boil.GetLocation())
			if row.CreatedAt.IsZero() {
				row.CreatedAt = currTime
			}

			row.UpdatedAt = currTime
		}

		if err := row.doBeforeUpsertHooks(ctx, exec); err != nil {
			return 0, err
		}

		value := reflect.Indirect(reflect.ValueOf(row))
		vals = append(vals, queries.ValuesFromMapping(value, valueMapping)...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, vals)
	}

	result, err := exec.ExecContext(ctx, query, vals...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to upsert for plans")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by upsert for plans")
	}

	if len(planAfterUpsertHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterUpsertHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// DeleteAllByPage delete all Plan records from the slice.
// This function deletes data by pages to avoid exceeding Mysql limitation (max placeholders: 65535)
// Mysql Error 1390: Prepared statement contains too many placeholders.
func (s PlanSlice) DeleteAllByPage(ctx context.Context, exec boil.ContextExecutor, limits ...int) (int64, error) {
	length := len(s)
	if length == 0 {
		return 0, nil
	}

	// MySQL max placeholders = 65535
	chunkSize := DefaultPageSize
	if len(limits) > 0 && limits[0] > 0 && limits[0] <= MaxPageSize {
		chunkSize = limits[0]
	}
	if length <= chunkSize {
		return s.DeleteAll(ctx, exec)
	}

	rowsAffected := int64(0)
	start := 0
	for {
		end := start + chunkSize
		if end > length {
			end = length
		}
		rows, err := s[start:end].DeleteAll(ctx, exec)
		if err != nil {
			return rowsAffected, err
		}

		rowsAffected += rows
		start = end
		if start >= length {
			break
		}
	}
	return rowsAffected, nil
}

// UpdateAllByPage update all Plan records from the slice.
// This function updates data by pages to avoid exceeding Mysql limitation (max placeholders: 65535)
// Mysql Error 1390: Prepared statement contains too many placeholders.
func (s PlanSlice) UpdateAllByPage(ctx context.Context, exec boil.ContextExecutor, cols M, limits ...int) (int64, error) {
	length := len(s)
	if length == 0 {
		return 0, nil
	}

	// MySQL max placeholders = 65535
	// NOTE (eric): len(cols) should not be too big
	chunkSize := DefaultPageSize
	if len(limits) > 0 && limits[0] > 0 && limits[0] <= MaxPageSize {
		chunkSize = limits[0]
	}
	if length <= chunkSize {
		return s.UpdateAll(ctx, exec, cols)
	}

	rowsAffected := int64(0)
	start := 0
	for {
		end := start + chunkSize
		if end > length {
			end = length
		}
		rows, err := s[start:end].UpdateAll(ctx, exec, cols)
		if err != nil {
			return rowsAffected, err
		}

		rowsAffected += rows
		start = end
		if start >= length {
			break
		}
	}
	return rowsAffected, nil
}

// InsertAllByPage insert all Plan records from the slice.
// This function inserts data by pages to avoid exceeding Mysql limitation (max placeholders: 65535)
// Mysql Error 1390: Prepared statement contains too many placeholders.
func (s PlanSlice) InsertAllByPage(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns, limits ...int) (int64, error) {
	length := len(s)
	if length == 0 {
		return 0, nil
	}

	// MySQL max placeholders = 65535
	chunkSize := MaxPageSize / reflect.ValueOf(&PlanColumns).Elem().NumField()
	if len(limits) > 0 && limits[0] > 0 && limits[0] < chunkSize {
		chunkSize = limits[0]
	}
	if length <= chunkSize {
		return s.InsertAll(ctx, exec, columns)
	}

	rowsAffected := int64(0)
	start := 0
	for {
		end := start + chunkSize
		if end > length {
			end = length
		}
		rows, err := s[start:end].InsertAll(ctx, exec, columns)
		if err != nil {
			return rowsAffected, err
		}

		rowsAffected += rows
		start = end
		if start >= length {
			break
		}
	}
	return rowsAffected, nil
}

// InsertIgnoreAllByPage insert all Plan records from the slice.
// This function inserts data by pages to avoid exceeding Postgres limitation (max parameters: 65535)
func (s PlanSlice) InsertIgnoreAllByPage(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns, limits ...int) (int64, error) {
	length := len(s)
	if length == 0 {
		return 0, nil
	}

	// max number of parameters = 65535
	chunkSize := MaxPageSize / reflect.ValueOf(&PlanColumns).Elem().NumField()
	if len(limits) > 0 && limits[0] > 0 && limits[0] < chunkSize {
		chunkSize = limits[0]
	}
	if length <= chunkSize {
		return s.InsertIgnoreAll(ctx, exec, columns)
	}

	rowsAffected := int64(0)
	start := 0
	for {
		end := start + chunkSize
		if end > length {
			end = length
		}
		rows, err := s[start:end].InsertIgnoreAll(ctx, exec, columns)
		if err != nil {
			return rowsAffected, err
		}

		rowsAffected += rows
		start = end
		if start >= length {
			break
		}
	}
	return rowsAffected, nil
}

// UpsertAllByPage upsert all Plan records from the slice.
// This function upserts data by pages to avoid exceeding Mysql limitation (max placeholders: 65535)
// Mysql Error 1390: Prepared statement contains too many placeholders.
func (s PlanSlice) UpsertAllByPage(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns, limits ...int) (int64, error) {
	length := len(s)
	if length == 0 {
		return 0, nil
	}

	// MySQL max placeholders = 65535
	chunkSize := MaxPageSize / reflect.ValueOf(&PlanColumns).Elem().NumField()
	if len(limits) > 0 && limits[0] > 0 && limits[0] < chunkSize {
		chunkSize = limits[0]
	}
	if length <= chunkSize {
		return s.UpsertAll(ctx, exec, updateColumns, insertColumns)
	}

	rowsAffected := int64(0)
	start := 0
	for {
		end := start + chunkSize
		if end > length {
			end = length
		}
		rows, err := s[start:end].UpsertAll(ctx, exec, updateColumns, insertColumns)
		if err != nil {
			return rowsAffected, err
		}

		rowsAffected += rows
		start = end
		if start >= length {
			break
		}
	}
	return rowsAffected, nil
}

// LoadSupportersByPage performs eager loading of values by page. This is for a N-1 relationship.
func (s PlanSlice) LoadSupportersByPage(ctx context.Context, e boil.ContextExecutor, mods ...qm.QueryMod) error {
	return s.LoadSupportersByPageEx(ctx, e, DefaultPageSize, mods...)
}
func (s PlanSlice) LoadSupportersByPageEx(ctx context.Context, e boil.ContextExecutor, pageSize int, mods ...qm.QueryMod) error {
	if len(s) == 0 {
		return nil
	}
	for _, chunk := range chunkSlice[*Plan](s, pageSize) {
		if err := chunk[0].L.LoadSupporter(ctx, e, false, &chunk, queryMods(mods)); err != nil {
			return err
		}
	}
	return nil
}

func (s PlanSlice) GetLoadedSupporters() SupporterSlice {
	result := make(SupporterSlice, 0, len(s))
	mapCheckDup := make(map[*Supporter]struct{})
	for _, item := range s {
		if item.R == nil || item.R.Supporter == nil {
			continue
		}
		if _, ok := mapCheckDup[item.R.Supporter]; ok {
			continue
		}
		result = append(result, item.R.Supporter)
		mapCheckDup[item.R.Supporter] = struct{}{}
	}
	return result
}

///////////////////////////////// END EXTENSIONS /////////////////////////////////
