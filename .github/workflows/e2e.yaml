name: E2E

on:
  pull_request:
    types: [opened, synchronize]
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      db:
        image: mysql:8.0.28
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=5
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: it_support_test
          TZ: 'Asia/Tokyo'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        id: setup-go-e2e
        with:
          go-version: '1.23'
          go-version-file: ./api-server/go.mod
          cache: true
          cache-dependency-path: ./api-server/go.sum

      - name: Install dependencies
        working-directory: ./api-server
        if: ${{ steps.setup-go-e2e.outputs.cache-hit != 'true' }}
        run: |
          go mod tidy
          go install github.com/rubenv/sql-migrate/...@latest
          go install github.com/joho/godotenv/cmd/godotenv@latest

      - name: Prepare storage directory
        working-directory: ./api-server
        run: mkdir data/ && mkdir data/it_support_test

      - name: Set up google cloud server
        uses: fsouza/fake-gcs-action@v0.4.1
        with:
          version: '1.37.2'
          backend: memory
          data: './api-server/data'
          public-host: 'gcs:4443'
          external-url: 'http://gcs:4443'
          scheme: http

      - name: Add GCS to /etc/hosts
        run: echo "127.0.0.1 gcs" | sudo tee -a /etc/hosts

      - name: migrate
        working-directory: ./migrations
        run: make migrate-test

      - name: Seeding
        working-directory: ./api-server
        run: make test-seed-ci

      - name: Boot API Server
        working-directory: ./api-server
        run: |
          godotenv -f .env.test go run cmd/registration/main.go &
          godotenv -f .env.test go run cmd/business/main.go &

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: ./frontend/it-support/pnpm-lock.yaml

      - name: Install yq
        run: |
          sudo apt-get update
          sudo apt-get install -y yq

      - name: Get installed Playwright version
        id: playwright-version
        run: |
          VERSION=$(yq '.importers.".".devDependencies."@playwright/test".version' frontend/it-support/pnpm-lock.yaml)
          echo "PLAYWRIGHT_VERSION=$VERSION" >> "$GITHUB_ENV"

      - name: Cache playwright binaries
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}

      - name: Install dependencies
        working-directory: ./frontend/it-support
        run: pnpm i

      - run: pnpm playwright install --with-deps
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        working-directory: ./frontend/it-support

      - name: Run Playwright tests
        working-directory: ./frontend/it-support
        run: pnpm test:e2e

      - uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30
